name: Update Documentation

on:
  pull_request:
    paths:
      - 'roles/*/defaults/main.yaml'
      - 'roles/*/Chart.yaml'
      - 'roles/*/README.md.gotmpl'

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

defaults:
  run:
    shell: bash

permissions:
  contents: write

jobs:
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install package
        env:
          HELM_DOCS_URL: https://github.com/norwoodj/helm-docs/releases/download
          HELM_DOCS_VERSION: 1.14.2
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const os = require('os');
            const tmpDir = os.tmpdir();
            const helmDocsPath = [tmpDir,
              'helm-docs_' + process.env.HELM_DOCS_VERSION + '_Linux_x86_64.deb'
            ].join('/');
            const helmDocsUrl = [process.env.HELM_DOCS_URL, 'v' + process.env.HELM_DOCS_VERSION,
              'helm-docs_' + process.env.HELM_DOCS_VERSION + '_Linux_x86_64.deb'
            ].join('/');
            try {
              await exec.exec('sudo wget', ['-qP', tmpDir, helmDocsUrl]);
              if (!fs.existsSync(helmDocsPath)) {
                throw new Error('Download failure.');
              }
              await exec.exec('sudo', ['apt-get', '-y', 'install', helmDocsPath]);
              console.log('Package helm-docs installed successfully.');
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Update documentation
        id: update
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const runGit = async (args) => (await exec.getExecOutput('git', args)).stdout.trim();
            const processFiles = async (flag, label) => {
              const excludeList = fs.readFileSync('.git/info/exclude', 'utf-8').split('\n');
              const files = (await runGit(['ls-files', '-' + flag, '--deduplicate']))
                .split('\n')
                .filter(file => file && (flag === 'om' ? !excludeList.includes(file) : true));
              core.setOutput(label, files.join(','));
              return files.length;
            };
            try {
              const gitCmds = [
                ['config', 'user.name', 'github-actions[bot]'],
                ['config', 'user.email', '41898282+github-actions[bot]@users.noreply.github.com'],
                ['fetch'],
                ['switch', process.env.GITHUB_HEAD_REF]
              ];
              for (const cmd of gitCmds) {
                await runGit(cmd);
              }
              await exec.exec('helm-docs', ['--values-file=./defaults/main.yaml'], { silent: true });
              const [additions, deletions] = await Promise.all([
                processFiles('om', 'additions'), processFiles('d', 'deletions')
              ]);
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Create commit
        if: steps.update.outputs.additions || steps.update.outputs.deletions
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const mutation = `
              mutation CreateCommitOnBranch($input: CreateCommitOnBranchInput!) {
                createCommitOnBranch(input: $input) { commit { oid } }
              }
            `;
            const parseFiles = (files, type) => 
              files.split(',').filter(Boolean).map(file => (type === 'add')
                ? { path: file, contents: Buffer.from(fs.readFileSync(file, 'utf-8')).toString('base64') }
                : { path: file });
            const fileChanges = {
              additions: parseFiles('${{ steps.update.outputs.additions }}', 'add'),
              deletions: parseFiles('${{ steps.update.outputs.deletions }}', 'delete')
            };
            const input = {
              branch: {
                repositoryNameWithOwner: context.payload.repository.full_name,
                branchName: context.payload.pull_request.head.ref,
              },
              message: { headline: 'docs(github-action): update documentation' },
              fileChanges,
              expectedHeadOid: context.payload.pull_request.head.sha
            };
            try {
              const { createCommitOnBranch } = await github.graphql(mutation, { input });
              console.log('Commit created with OID:', createCommitOnBranch.commit.oid);
            } catch (error) {
              core.setFailed(error.message);
            }
