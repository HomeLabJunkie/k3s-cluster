{% if cilium_setup %}
bandwidthManager:
  enabled: true
enableCiliumEndpointSlice: true
envoy:
  enabled: true
  resources:
    limits:
      cpu: {{ cilium_vars.kubernetes.envoy.resources.limits.cpu }}
      memory: {{ cilium_vars.kubernetes.envoy.resources.limits.memory }}
    requests:
      cpu: {{ cilium_vars.kubernetes.envoy.resources.requests.cpu }}
      memory: {{ cilium_vars.kubernetes.envoy.resources.requests.memory }}
  rollOutPods: true
externalIPs:
  enabled: true
gatewayAPI:
  enabled: true
ipam:
  operator:
    clusterPoolIPv4PodCIDRList: {{ cilium_vars.kubernetes.ipam.operator.cluster_pool }}
hubble:
  peerService:
    clusterDomain: {{ k3s_vars.server.cluster.domain }}
  relay:
    enabled: true
    podDisruptionBudget:
      enabled: true
    replicas: {{ cilium_vars.kubernetes.hubble.relay.replicas }}
    resources:
      limits:
        cpu: {{ cilium_vars.kubernetes.hubble.relay.resources.limits.cpu }}
        memory: {{ cilium_vars.kubernetes.hubble.relay.resources.limits.memory }}
      requests:
        cpu: {{ cilium_vars.kubernetes.hubble.relay.resources.requests.cpu }}
        memory: {{ cilium_vars.kubernetes.hubble.relay.resources.requests.memory }}
    retryTimeout: {{ cilium_vars.kubernetes.hubble.relay.retry_timeout }}
    rollOutPods: true
  ui:
    enabled: true
    podDisruptionBudget:
      enabled: true
    replicas: {{ cilium_vars.kubernetes.hubble.ui.replicas }}
    resources:
      limits:
        cpu: {{ cilium_vars.kubernetes.hubble.ui.resources.limits.cpu }}
        memory: {{ cilium_vars.kubernetes.hubble.ui.resources.limits.memory }}
      requests:
        cpu: {{ cilium_vars.kubernetes.hubble.ui.resources.requests.cpu }}
        memory: {{ cilium_vars.kubernetes.hubble.ui.resources.requests.memory }}
    rollOutPods: true
k8sClientRateLimit:
  burst: {{ cilium_vars.kubernetes.client.rate_limit.burst }}
  qps: {{ cilium_vars.kubernetes.client.rate_limit.qps }}
k8sServiceHost: {{ k3s_vars.server.loadbalancer.host }}
k8sServicePort: {{ k3s_vars.server.loadbalancer.port }}
kubeProxyReplacement: true
operator:
  resources:
    limits:
      cpu: {{ cilium_vars.kubernetes.operator.resources.limits.cpu }}
      memory: {{ cilium_vars.kubernetes.operator.resources.limits.memory }}
    requests:
      cpu: {{ cilium_vars.kubernetes.operator.resources.requests.cpu }}
      memory: {{ cilium_vars.kubernetes.operator.resources.requests.memory }}
  rollOutPods: true
rollOutCiliumPods: true
{% elif cilium_postinstall %}
dashboards:
  enabled: true
envoy:
  prometheus:
    serviceMonitor:
      enabled: true
hubble:
  metrics:
    dashboards:
      enabled: true
    enabled:
      - dns:query;ignoreAAAA
      - drop
      - flow
      - httpV2
      - icmp
      - port-distribution
      - tcp
    serviceMonitor:
      enabled: true
  relay:
    prometheus:
      serviceMonitor:
        enabled: true
{% if cilium_vars.kubernetes.hubble.tls.auto.method | lower == 'certmanager' %}
  tls:
    auto:
      certManagerIssuerRef:
        group: cert-manager.io
        kind: ClusterIssuer
        name: {{ cilium_vars.kubernetes.hubble.tls.cluster_issuer.name }}
      method: {{ cilium_vars.kubernetes.hubble.tls.auto.method }}
{% endif %}
operator:
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
prometheus:
  enabled: true
  serviceMonitor:
    enabled: true
{% else %}
ingressController:
  enabled: true
  service:
    loadBalancerIP: {{ cilium_vars.kubernetes.ingress.controller.service.loadbalancer.ip }}
{% if cilium_vars.kubernetes.loadbalancer.algorithm | lower == 'maglev' %}
loadBalancer:
  algorithm: {{ cilium_vars.kubernetes.loadbalancer.algorithm }}
maglev:
  hashSeed: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits'], length=12) }}"
  tableSize: {{ cilium_vars.kubernetes.loadbalancer.table_size }}
{% endif %}
{% if cilium_vars.kubernetes.routing_mode | lower == 'native' %}
autoDirectNodeRoutes: true
ipv4NativeRoutingCIDR: {{ cilium_vars.kubernetes.ipam.operator.cluster_pool }}
l2announcements:
  enabled: true
l2podAnnouncements:
  enabled: true
  interface: {{ k3s_vars.network.interface }}
routingMode: {{ cilium_vars.kubernetes.routing_mode }}
{% endif %}
{% endif %}
