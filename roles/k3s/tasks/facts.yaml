---
- name: Set list kubelet arguments fact
  ansible.builtin.set_fact:
    k3s_list_kubelet_args: "{{ k3s_list_kubelet_args | default([]) | union(['='.join((kubelet.arg | string, kubelet.value | string))]) }}"
  loop: '{{ k3s_vars.kubelet }}'
  loop_control:
    loop_var: kubelet
  run_once: true

- name: Set list taints fact
  ansible.builtin.set_fact:
    k3s_list_taints: "{{ k3s_list_taints | default([]) | union([':'.join((taint.key | string, taint.effect | string))]) }}"
  loop: '{{ k3s_vars.tolerations }}'
  loop_control:
    loop_var: taint
  run_once: true

- name: Set map fact
  ansible.builtin.set_fact:
    k3s_map:
      cluster:
        config: '{{ k3s_vars.directory.config }}/config.yaml'
        ha: '{{ groups.server | length > 2 }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/{{ k3s_vars.release.k3s.name }}.yaml'
        label: default
        non_ha: '{{ groups.server | length == 1 }}'
      loadbalancer:
        hosts: '{{ groups.server[-2:] }}'
        password: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits'], length=8) }}"
      node:
        kubelet:
          args: '{{ k3s_list_kubelet_args }}'
        taint:
          agent: "{{ k3s_list_taints | select('search', 'agent-not-ready') | default('') }}"
          server: "{{ k3s_list_taints | select('search', 'control-plane') | default('') }}"
      release:
        k3s:
          checksum: '{{ k3s_vars.release.k3s.checksum }}'
          url: https://github.com/{{ k3s_vars.release.k3s.repository.org }}/{{ k3s_vars.release.k3s.repository.name }}/releases
        kubepug:
          checksum: '{{ k3s_vars.release.kubepug.name }}_{{ k3s_vars.release.kubepug.version[1:] }}_{{ k3s_vars.release.kubepug.checksum }}'
          url: https://github.com/{{ k3s_vars.release.kubepug.repository.org }}/{{ k3s_vars.release.kubepug.repository.name }}/releases
      server:
        default_host: '{{ hostvars[groups.server[0]].ansible_hostname | default(groups.server[0]) }}'
        hosts: '{{ groups.server }}'
      service:
        name: "k3s{{ '-agent' if ansible_host not in groups.server }}"
  run_once: true

- name: Set map loadbalancer fact
  ansible.builtin.set_fact:
    k3s_map_loadbalancer:
      ips: "{{ k3s_map.loadbalancer.hosts | map('extract', hostvars, ['ansible_default_ipv4', 'address']) }}"
  when: ansible_host in k3s_map.loadbalancer.hosts

- name: Set map server fact
  ansible.builtin.set_fact:
    k3s_map_server:
      default_ip: '{{ ansible_default_ipv4.address }}'
      ips: "{{ k3s_map.server.hosts | map('extract', hostvars, ['ansible_default_ipv4', 'address']) }}"
  when: ansible_host in k3s_map.server.hosts

- name: Set project fact
  ansible.builtin.set_fact:
    k3s_project:
      release:
        k3s:
          checksum: '{{ k3s_map.release.k3s.url }}/download/{{ k3s_vars.release.k3s.version }}/{{ k3s_map.release.k3s.checksum }}'
          file: '{{ k3s_map.release.k3s.url }}/download/{{ k3s_vars.release.k3s.version }}/{{ k3s_vars.release.k3s.file }}'
        kubepug:
          checksum: '{{ k3s_map.release.kubepug.url }}/download/{{ k3s_vars.release.kubepug.version }}/{{ k3s_map.release.kubepug.checksum }}'
          file: '{{ k3s_map.release.kubepug.url }}/download/{{ k3s_vars.release.kubepug.version }}/{{ k3s_vars.release.kubepug.file }}'
      token: "{{ hostvars[k3s_map.server.default_host].token | default('') }}"
  run_once: true

- name: Set service type fact
  ansible.builtin.set_fact:
    k3s_service_type: "{{ 'agent' if ansible_host not in k3s_map.server.hosts else 'server' }}"

- name: Set variables fact
  ansible.builtin.set_fact:
    k3s_vars: '{{ k3s_vars }}'
  run_once: true
