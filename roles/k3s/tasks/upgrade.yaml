---
- name: Role Facts
  ansible.builtin.import_tasks:
    file: facts.yaml

- name: Role Validation
  ansible.builtin.import_tasks:
    file: validation.yaml

- name: Get binary status
  ansible.builtin.stat:
    path: '{{ k3s_vars.directory.bin }}/k3s'
  changed_when: not k3s_binary.stat.exists
  register: k3s_binary

- name: Role Upgrade Validation
  run_once: true
  block:
    - name: Validate deployed cluster
      ansible.builtin.assert:
        that: k3s_binary.stat.exists
        fail_msg: 'ERROR: K3s cluster not deployed.'
        quiet: true

    - name: Get deployed cluster version
      ansible.builtin.shell: |
        set -eo pipefail
        k3s --version | grep k3s | cut -d ' ' -f 3
      args:
        executable: /bin/bash
      register: k3s_version
      changed_when: false

- name: Role Upgrade
  block:
    - name: Server Upgrade
      when: ansible_host in k3s_map.server.hosts
      block:
        - name: Set Token
          no_log: true
          run_once: true
          block:
            - name: Read node token
              ansible.builtin.slurp:
                path: '{{ k3s_vars.directory.lib }}/server/node-token'
              register: node_token

            - name: Update project token fact
              ansible.utils.update_fact:
                updates:
                  - path: k3s_project.token
                    value: '{{ node_token.content | b64decode | trim }}'
              register: update

            - name: Set project fact
              ansible.builtin.set_fact:
                k3s_project: '{{ update.k3s_project }}'

        - name: Kubepug Upgrade
          ansible.builtin.import_tasks:
            file: kubepug.yaml

    - name: Set configuration postinstall fact
      ansible.builtin.set_fact:
        k3s_config_postinstall: true

    - name: Update configuration file
      ansible.builtin.template:
        src: config.j2
        dest: '{{ k3s_map.cluster.config }}'
        owner: root
        group: root
        mode: '0600'
      register: k3s_config

    - name: Install k3s binary
      ansible.builtin.get_url:
        url: '{{ k3s_project.release.k3s.file }}'
        checksum: sha256:{{ k3s_project.release.k3s.checksum }}
        dest: '{{ k3s_vars.directory.bin }}/k3s'
        owner: root
        group: root
        mode: '0755'
      register: result
      delay: 1
      retries: 3
      until: result is not failed
      when: k3s_version.stdout != k3s_vars.release.k3s.version

    - name: Schedule reboot
      ansible.builtin.file:
        path: /var/run/reboot-required
        access_time: preserve
        modification_time: preserve
        state: touch
        owner: root
        group: root
        mode: '0644'
      when: k3s_config.changed or k3s_version.stdout != k3s_vars.release.k3s.version
